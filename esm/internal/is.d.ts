type Falsy = undefined | null | 0 | false | '';
type Func = (...args: any[]) => any;
declare const is: {
    notEmptyString: (candidate: any) => candidate is string;
    emptyString: (candidate: any) => boolean;
    emptyArray: (candidate: any) => boolean;
    notEmptyArray: <T>(candidate: any) => candidate is T[];
    number: (candidate: any) => candidate is number;
    string: (candidate: any) => candidate is string;
    integerString: (candidate: any) => candidate is string;
    numberString: (candidate: any) => candidate is string;
    null: (candidate: any) => candidate is null;
    undefined: (candidate: any) => candidate is undefined;
    nullOrUndefined: (candidate: any) => candidate is null;
    falsy: <T_1>(candidate: Falsy | T_1) => candidate is Falsy;
    truthy: <T_2>(candidate: Falsy | T_2) => candidate is T_2;
    function: <T_3 extends Func, R extends unknown>(candidate: T_3 | R) => candidate is T_3;
    object: (candidate: any) => candidate is Record<string, unknown>;
    plainObject: (candidate: any) => candidate is Record<string, unknown>;
    array: <T_4>(candidate: any) => candidate is T_4[];
    boolean: (candidate: any) => candidate is boolean;
    promise: <T_5>(p: any) => p is Promise<T_5>;
};
export default is;
